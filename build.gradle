buildscript {
	repositories {
		maven { url = 'https://files.minecraftforge.net/maven' }
		maven { url = 'https://repo.spongepowered.org/maven' }
		jcenter()
		mavenCentral()
		maven { url = 'https://plugins.gradle.org/m2/' }
	}
	dependencies {
		classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
		classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
		classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.4'
	}
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'eclipse'

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar


sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}


def modID = "foamfix"
archivesBaseName = "$modID-Forge"
version = '0.15.0'

minecraft {
	mappings channel: 'snapshot', version: '20201028-1.16.3'
	accessTransformer = file('AT.cfg')

	runs {
		client {
			workingDirectory project.file('run')

			args '--mixin.config', "${modID}.mixins.json".toString()
			//property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
			property 'forge.logging.console.level', 'debug'

			mods {
				"$modID" {//Groovy short hand for create(modID)
					source sourceSets.main
				}
			}
		}

		server {
			workingDirectory project.file('runServer')

			args '--mixin.config', "${modID}.mixins.json".toString()
			//property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
			property 'forge.logging.console.level', 'debug'

			mods {
				"$modID" {
					source sourceSets.main
				}
			}
		}
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spongepowered.org/maven' }
}

configurations {
	shade
}

dependencies {
	minecraft 'net.minecraftforge:forge:1.16.4-35.1.13'

	shade implementation('org.ini4j:ini4j:0.5.4')
}

mixin {
	//disableRefMapWarning = true
	add sourceSets.main, "${modID}.mixins-refmap.json"
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
	classifier = 'unshaded'
	manifest {
		attributes([
			'Specification-Title': "$modID",
			'Specification-Vendor': 'asie',
			'Specification-Version': '1',
			'Implementation-Title': project.name,
			'Implementation-Version': "$version",
			'Implementation-Vendor' : 'Chocohead',
			'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
			'MixinConfigs': "${modID}.mixins.json"
		])
	}
}

task shadowJar(type: ShadowJar) {
	dependsOn 'reobfJar'
    from(zipTree(jar.archivePath)) {//reobfJar acts in place
    	rename 'org\\.ini4j\\.(.+)', 'com.chocohead.foamfix.ini4j.$1'
    }
    classifier ''
    manifest.inheritFrom jar.manifest

    configurations = [project.configurations.shade]
	relocate 'org.ini4j', 'com.chocohead.foamfix.ini4j'
	exclude 'META-INF/maven/**'
	minimize()
}

assemble.dependsOn shadowJar